<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnimationDescription" xml:space="preserve">
    <value>ロードおよび更新アニメーションモード</value>
    <comment>Shows load and update animation modes.</comment>
  </data>
  <data name="AnimationTitle" xml:space="preserve">
    <value>アニメーション</value>
    <comment>Animation</comment>
  </data>
  <data name="BasicFeaturesDescription" xml:space="preserve">
    <value>内側半径、オフセット、開始角度</value>
    <comment>Shows inner radius, offset, and start angle.</comment>
  </data>
  <data name="BasicFeaturesTitle" xml:space="preserve">
    <value>基本機能</value>
    <comment>Basic Features</comment>
  </data>
  <data name="CustomTooltipsDescription" xml:space="preserve">
    <value>カスタマイズされたツールチップを表示</value>
    <comment>Shows a customized tooltip.</comment>
  </data>
  <data name="CustomTooltipsTitle" xml:space="preserve">
    <value>カスタムツールチップ</value>
    <comment>Custom Tooltips</comment>
  </data>
  <data name="DataLabelsDescription" xml:space="preserve">
    <value>静的なデータラベルを表示</value>
    <comment>Shows static data labels.</comment>
  </data>
  <data name="DataLabelsTitle" xml:space="preserve">
    <value>データラベル</value>
    <comment>Data Labels</comment>
  </data>
  <data name="ExportImageDescription" xml:space="preserve">
    <value>FlexPie を画像として保存する方法</value>
    <comment>Shows how to export an image of FlexPie.</comment>
  </data>
  <data name="ExportImageTitle" xml:space="preserve">
    <value>画像のエクスポート</value>
    <comment>Export Image</comment>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>ツールチップを備えた円グラフを表示</value>
    <comment>Shows a simple pie chart with tooltips.</comment>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>FlexPie の基本機能</value>
    <comment>Getting Started</comment>
  </data>
  <data name="ImageSavedDescription" xml:space="preserve">
    <value>画像をデバイスに保存しました</value>
    <comment>The image has been saved to your device's picture album.</comment>
  </data>
  <data name="ImageSavedTitle" xml:space="preserve">
    <value>画像の保存</value>
    <comment>Image Saved</comment>
  </data>
  <data name="LegendSampleDescription" xml:space="preserve">
    <value>ヘッダ、フッタ、凡例の配置</value>
    <comment>Shows basic header, footer, and legend positioning.</comment>
  </data>
  <data name="LegendSampleTitle" xml:space="preserve">
    <value>凡例とタイトル</value>
    <comment>Legend and Titles</comment>
  </data>
  <data name="OKTitle" xml:space="preserve">
    <value>OK</value>
    <comment>OK</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
    <comment>Save</comment>
  </data>
  <data name="SelectionDescription" xml:space="preserve">
    <value>選択アニメーション、オフセットなど</value>
    <comment>Shows selection animation, offset, and position.</comment>
  </data>
  <data name="SelectionTitle" xml:space="preserve">
    <value>選択</value>
    <comment>Selection</comment>
  </data>
  <data name="ThemingDescription" xml:space="preserve">
    <value>使用可能なパレットを表示</value>
    <comment>Shows available palettes.</comment>
  </data>
  <data name="ThemingTitle" xml:space="preserve">
    <value>テーマ</value>
    <comment>Theming</comment>
  </data>
</root>