<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Apply" xml:space="preserve">
    <value>应用</value>
    <comment>应用对项目的编辑</comment>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
    <comment>取消对项目的编辑</comment>
  </data>
  <data name="Collapse" xml:space="preserve">
    <value>折叠</value>
  </data>
  <data name="ColumnDefinitionDescription" xml:space="preserve">
    <value>显示如何指定和格式化列。</value>
  </data>
  <data name="ColumnDefinitionTitle" xml:space="preserve">
    <value>列定义</value>
  </data>
  <data name="CustomCellsDescription" xml:space="preserve">
    <value>通过在仪表盘中显示数值定制单元格。</value>
  </data>
  <data name="CustomCellsTitle" xml:space="preserve">
    <value>自定义单元格</value>
  </data>
  <data name="EditCustomer" xml:space="preserve">
    <value>修改自定义</value>
  </data>
  <data name="EditingDescription" xml:space="preserve">
    <value>通过输入表单而不是内联编辑单元格。</value>
  </data>
  <data name="EditingTitle" xml:space="preserve">
    <value>编辑表单</value>
  </data>
  <data name="EditRow" xml:space="preserve">
    <value>编辑行</value>
    <comment>编辑单个行</comment>
  </data>
  <data name="EmptyListText" xml:space="preserve">
    <value>没有视频可显示。</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>过滤器</value>
  </data>
  <data name="FilterDescription" xml:space="preserve">
    <value>通过生成表单中的列筛选数据。</value>
  </data>
  <data name="FilterPlaceholderText" xml:space="preserve">
    <value>输入要筛选的文本</value>
  </data>
  <data name="FilterTitle" xml:space="preserve">
    <value>过滤器</value>
  </data>
  <data name="FullTextFilterDescription" xml:space="preserve">
    <value>跨所有行筛选和高亮显示数据。</value>
  </data>
  <data name="FullTextFilterTitle" xml:space="preserve">
    <value>全文筛选</value>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>使用FlexGrid一次性显示、编辑和统计数据。</value>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>开始使用</value>
  </data>
  <data name="GroupingDescription" xml:space="preserve">
    <value>对视频集分组统计。</value>
  </data>
  <data name="GroupingTitle" xml:space="preserve">
    <value>分组</value>
  </data>
  <data name="OnDemandDescription" xml:space="preserve">
    <value>用户向下滚动表格时按需加载项目。</value>
  </data>
  <data name="OnDemandTitle" xml:space="preserve">
    <value>需要</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>删除</value>
    <comment>删除过滤器</comment>
  </data>
  <data name="SearchPlaceholderText" xml:space="preserve">
    <value>输入文本在YouTube上搜索视频</value>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>显示多种单元格选择模式。</value>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>选择模式</value>
  </data>
  <data name="Sort" xml:space="preserve">
    <value>排序</value>
  </data>
  <data name="ConditionalFormattingDescription" xml:space="preserve">
    <value>使用CellFactory应用条件格式化。</value>
  </data>
  <data name="ConditionalFormattingTitle" xml:space="preserve">
    <value>条件格式化</value>
  </data>
</root>