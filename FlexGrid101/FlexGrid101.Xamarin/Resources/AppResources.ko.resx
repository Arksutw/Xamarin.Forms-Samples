<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Apply" xml:space="preserve">
    <value>적용</value>
    <comment>apply edits for this item</comment>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>취소</value>
    <comment>cancel edits for this item</comment>
  </data>
  <data name="Collapse" xml:space="preserve">
    <value>축소</value>
  </data>
  <data name="ColumnDefinitionDescription" xml:space="preserve">
    <value>열 지정 및 형식 지정 방법을 표시합니다.</value>
  </data>
  <data name="ColumnDefinitionTitle" xml:space="preserve">
    <value>열 정의</value>
  </data>
  <data name="CustomCellsDescription" xml:space="preserve">
    <value>Gauge에 숫자 값을 표시하여 셀을 사용자 정의합니다.</value>
  </data>
  <data name="CustomCellsTitle" xml:space="preserve">
    <value>셀 사용자 정의</value>
  </data>
  <data name="EditCustomer" xml:space="preserve">
    <value>고객 편집</value>
  </data>
  <data name="EditingDescription" xml:space="preserve">
    <value>인라인이 아닌 입력 폼으로 셀을 편집합니다.</value>
  </data>
  <data name="EditingTitle" xml:space="preserve">
    <value>폼 편집</value>
  </data>
  <data name="EditRow" xml:space="preserve">
    <value>행 편집</value>
    <comment>edit a single row</comment>
  </data>
  <data name="EmptyListText" xml:space="preserve">
    <value>표시할 비디오가 없습니다.</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>필터</value>
  </data>
  <data name="FilterDescription" xml:space="preserve">
    <value>생성된 폼을 통해 열을 기준으로 데이터를 필터링합니다.</value>
  </data>
  <data name="FilterPlaceholderText" xml:space="preserve">
    <value>필터링할 텍스트 입력</value>
  </data>
  <data name="FilterTitle" xml:space="preserve">
    <value>필터</value>
  </data>
  <data name="FullTextFilterDescription" xml:space="preserve">
    <value>열 전체에서 해당 데이터를 필터링하고 강조 표시합니다.</value>
  </data>
  <data name="FullTextFilterTitle" xml:space="preserve">
    <value>전체 텍스트 필터</value>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>FlexGrid로 한 번에 모든 데이터를 표시, 편집 및 집계합니다.</value>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>시작하기</value>
  </data>
  <data name="GroupingDescription" xml:space="preserve">
    <value>비디오 컬렉션을 그룹화 및 집계합니다.</value>
  </data>
  <data name="GroupingTitle" xml:space="preserve">
    <value>그룹화</value>
  </data>
  <data name="OnDemandDescription" xml:space="preserve">
    <value>사용자가 그리드 아래로 스크롤할 때 요구 시 항목을 로드합니다.</value>
  </data>
  <data name="OnDemandTitle" xml:space="preserve">
    <value>요구 시</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>제거</value>
    <comment>remove filter</comment>
  </data>
  <data name="SearchPlaceholderText" xml:space="preserve">
    <value>텍스트를 입력하여 YouTube에서 비디오를 검색합니다.</value>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>다양한 셀 선택 모드를 표시합니다.</value>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>선택 모드</value>
  </data>
  <data name="Sort" xml:space="preserve">
    <value>정렬</value>
  </data>
  <data name="ConditionalFormattingDescription" xml:space="preserve">
    <value>Uses a CellFactory to apply conditional formatting.</value>
  </data>
  <data name="ConditionalFormattingTitle" xml:space="preserve">
    <value>Conditional Formatting</value>
  </data>
</root>